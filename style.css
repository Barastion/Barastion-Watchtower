<!DOCTYPE html>
<html lang="pl">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Monitor Odwiedzin</title>
    <link rel="stylesheet" href="style.css">
    <meta http-equiv="Content-Security-Policy" content="default-src 'self'; script-src 'self' 'unsafe-inline' https://www.gstatic.com https://*.firebaseio.com https://*.firebasedatabase.app https://*.web.app; connect-src 'self' https://*.firebaseio.com https://*.firebasedatabase.app wss://*.firebaseio.com https://*.web.app https://api.ipify.org https://ipapi.co https://api.open-meteo.com; style-src 'self' 'unsafe-inline';">
</head>
<body>
    <div class="container">
        <h1>Monitor Odwiedzin</h1>
        
        <!-- Sekcja pogody -->
        <div class="weather-info">
            <div class="today-weather">
                <p class="today-date-label">Data:</p>
                <div class="today-date" id="currentDate">25.02.2025</div>
                <div class="today-temp">
                    <div class="temp-row">
                        <span class="temp-icon" id="todayWeatherIcon">☀️</span>
                        <span id="currentTempMax">10.5°C</span>
                    </div>
                    <div class="temp-row">
                        <span class="temp-icon" id="todayWeatherIconNight">🌙</span>
                        <span id="currentTempMin">1.0°C</span>
                    </div>
                </div>
            </div>
            <div class="weather-forecast">
                <h3 style="margin: 0;">Prognoza na następne dni:</h3>
                <p id="weatherLocation" style="font-size: 14px; color: white; text-align: center; margin-top: -5px;">(Dla miejscowości: <span id="weatherCity">Ładowanie...</span>)</p>
                <div class="forecast-container" id="weatherForecast"></div>
            </div>
        </div>

        <!-- Tabela logów -->
        <div class="log-table">
            <table id="logTable">
                <thead>
                    <tr>
                        <th>Data</th>
                        <th>Dzień</th>
                        <th>Godzina</th>
                        <th>IP</th>
                        <th>Lokalizacja</th>
                        <th>Urządzenie</th>
                    </tr>
                </thead>
                <tbody id="logTableBody"></tbody>
            </table>
        </div>
    </div>

    <script type="module">
        import { initializeApp } from "https://www.gstatic.com/firebasejs/11.3.1/firebase-app.js";
        import { getDatabase, ref, set, onValue, push, remove } from "https://www.gstatic.com/firebasejs/11.3.1/firebase-database.js";

        const firebaseConfig = {
            apiKey: "AIzaSyC333cf3uIs2QTjVeUN-rDuHtBZkGgZSLU",
            authDomain: "monitor-odwiedzin-405c9.firebaseapp.com",
            databaseURL: "https://monitor-odwiedzin-405c9-default-rtdb.europe-west1.firebasedatabase.app",
            projectId: "monitor-odwiedzin-405c9",
            storageBucket: "monitor-odwiedzin-405c9.appspot.com",
            messagingSenderId: "93459469114",
            appId: "1:93459469114:web:0a709b6be237705bf8f603"
        };

        const app = initializeApp(firebaseConfig);
        const database = getDatabase(app);

        function getDeviceType(userAgent) {
            if (userAgent.includes('Android')) return 'Android';
            if (userAgent.includes('iPhone')) return 'iPhone';
            if (userAgent.includes('iPad')) return 'Tablet';
            if (userAgent.includes('Macintosh')) return 'Mac';
            if (userAgent.includes('Windows') || userAgent.includes('Linux')) return 'PC';
            return 'Inne';
        }

        async function logVisit() {
            const now = new Date();
            const date = now.toLocaleDateString('pl-PL', { day: '2-digit', month: '2-digit', year: 'numeric' });
            const day = now.toLocaleDateString('pl-PL', { weekday: 'long' });
            const time = now.toLocaleTimeString('pl-PL', { hour: '2-digit', minute: '2-digit' });
            const ip = await getIp();
            const location = await getLocation(ip);
            const userAgent = navigator.userAgent;
            const device = getDeviceType(userAgent);

            const logEntry = { date, day, time, ip, location, device, timestamp: now.getTime() };
            console.log('Log entry do zapisania:', logEntry);

            const logsRef = ref(database, 'logs');
            const newLogRef = push(logsRef);
            try {
                await set(newLogRef, logEntry);
                console.log('Log zapisany w Firebase pod klucz:', newLogRef.key);
                updateLogs();
            } catch (error) {
                console.error('Błąd zapisu logu:', error);
            }
        }

        async function updateLogs() {
            const logsRef = ref(database, 'logs');
            onValue(logsRef, (snapshot) => {
                let logs = snapshot.val() ? Object.entries(snapshot.val()).map(([key, value]) => ({ key, ...value })) : [];
                console.log('Pobrane logi z Firebase:', logs);
                logs.sort((a, b) => b.timestamp - a.timestamp);
                if (logs.length > 100) {
                    const logsToDelete = logs.slice(100);
                    logs = logs.slice(0, 100);
                    logsToDelete.forEach(log => {
                        const logRef = ref(database, `logs/${log.key}`);
                        remove(logRef).then(() => console.log('Usunięto stary log:', log.key))
                            .catch(error => console.error('Błąd usuwania logu:', error));
                    });
                }
                displayLogs(logs);
            }, { onlyOnce: true });
        }

        function displayLogs(logs) {
            const logTableBody = document.getElementById('logTableBody');
            logTableBody.innerHTML = '';
            logs.forEach(log => {
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td>${log.date}</td>
                    <td>${log.day}</td>
                    <td>${log.time}</td>
                    <td>${log.ip}</td>
                    <td>${log.location}</td>
                    <td>${log.device}</td>
                `;
                logTableBody.appendChild(row);
            });
            console.log('Logi wyświetlone w tabeli:', logs.length);
        }

        async function getIp() {
            try {
                const response = await fetch('https://api.ipify.org?format=json');
                console.log('Status odpowiedzi IP:', response.status);
                const data = await response.json();
                console.log('Dane IP:', data);
                return data.ip || 'Nieznany IP';
            } catch (err) {
                console.error('Błąd pobierania IP:', err);
                return 'Nieznany IP';
            }
        }

        async function getLocation(ip) {
            try {
                const response = await fetch(`https://ipapi.co/${ip}/json/`);
                const data = await response.json();
                console.log('Dane lokalizacji z ipapi.co:', data);
                if (data.city && data.country_name) {
                    return `${data.city} / ${data.country_name}`;
                } else {
                    return 'Nieznana lokalizacja';
                }
            } catch (err) {
                console.error('Błąd pobierania lokalizacji:', err);
                return 'Nieznana lokalizacja';
            }
        }

        function getCurrentDate() {
            const now = new Date();
            return now.toLocaleDateString('pl-PL', { day: '2-digit', month: '2-digit', year: 'numeric' });
        }

        // Mapowanie kodów pogodowych na ikonki i opisy
        const weatherIcons = {
            0: { icon: '☀️', description: 'Bezchmurnie' },
            1: { icon: '🌤️', description: 'Lekko zachmurzone' },
            2: { icon: '⛅', description: 'Częściowo zachmurzone' },
            3: { icon: '☁️', description: 'Zachmurzone' },
            45: { icon: '🌫️', description: 'Mgła' },
            48: { icon: '🌫️', description: 'Mgła z szronem' },
            51: { icon: '🌦️', description: 'Lekka mżawka' },
            53: { icon: '🌧️', description: 'Umiarkowana mżawka' },
            55: { icon: '🌧️', description: 'Intensywna mżawka' },
            61: { icon: '🌦️', description: 'Lekki deszcz' },
            63: { icon: '🌧️', description: 'Umiarkowany deszcz' },
            65: { icon: '🌧️', description: 'Ulewny deszcz' },
            71: { icon: '🌨️', description: 'Lekki śnieg' },
            73: { icon: '🌨️', description: 'Umiarkowany śnieg' },
            75: { icon: '🌨️', description: 'Intensywny śnieg' },
            80: { icon: '🌦️', description: 'Przelotne opady' },
            81: { icon: '🌧️', description: 'Umiarkowane opady' },
            82: { icon: '🌧️', description: 'Gwałtowne opady' },
            95: { icon: '⛈️', description: 'Burza' },
            96: { icon: '⛈️', description: 'Burza z gradem' },
            // Dodaj inne kody wg dokumentacji open-meteo.com
        };

        async function getWeather(ip) {
            try {
                const locationResponse = await fetch(`https://ipapi.co/${ip}/json/`);
                const locationData = await locationResponse.json();
                console.log('Dane lokalizacji dla pogody:', locationData);
                if (!locationData.latitude || !locationData.longitude) {
                    throw new Error('Brakujące dane lokalizacji');
                }
                const lat = locationData.latitude;
                const lon = locationData.longitude;
                const city = locationData.city || 'Nieznane miasto';

                document.getElementById('weatherCity').textContent = city;

                // Pobranie prognozy z weathercode
                const forecastResponse = await fetch(`https://api.open-meteo.com/v1/forecast?latitude=${lat}&longitude=${lon}&daily=temperature_2m_max,temperature_2m_min,weathercode&timezone=auto`);
                const forecastData = await forecastResponse.json();

                document.getElementById('currentDate').textContent = getCurrentDate();

                if (forecastData.daily && forecastData.daily.temperature_2m_max && forecastData.daily.temperature_2m_min && forecastData.daily.weathercode) {
                    // Dzisiejsza pogoda
                    const todayWeatherCode = forecastData.daily.weathercode[0];
                    const todayWeather = weatherIcons[todayWeatherCode] || { icon: '❓', description: 'Nieznana pogoda' };
                    document.getElementById('todayWeatherIcon').textContent = todayWeather.icon;
                    document.getElementById('todayWeatherIcon').title = todayWeather.description;
                    document.getElementById('currentTempMax').textContent = `${forecastData.daily.temperature_2m_max[0].toFixed(1)}°C`;
                    document.getElementById('currentTempMin').textContent = `${forecastData.daily.temperature_2m_min[0].toFixed(1)}°C`;

                    // Prognoza na kolejne dni
                    const forecastContainer = document.getElementById('weatherForecast');
                    forecastContainer.innerHTML = '';

                    forecastData.daily.time.slice(1).forEach((date, index) => {
                        const formattedDate = new Date(date).toLocaleDateString('pl-PL', { day: 'numeric', month: 'numeric', year: 'numeric' });
                        const maxTemp = forecastData.daily.temperature_2m_max[index + 1];
                        const minTemp = forecastData.daily.temperature_2m_min[index + 1];
                        const weatherCode = forecastData.daily.weathercode[index + 1];
                        const weather = weatherIcons[weatherCode] || { icon: '❓', description: 'Nieznana pogoda' };

                        const forecastBar = document.createElement('div');
                        forecastBar.className = 'forecast-bar';

                        const forecastDate = document.createElement('div');
                        forecastDate.className = 'forecast-date';
                        forecastDate.textContent = formattedDate;
                        forecastBar.appendChild(forecastDate);

                        const forecastDay = document.createElement('div');
                        forecastDay.className = 'forecast-day';
                        forecastDay.innerHTML = `<span class="weather-icon" title="${weather.description}">${weather.icon}</span> ${maxTemp.toFixed(1)}°C`;
                        forecastBar.appendChild(forecastDay);

                        const forecastNight = document.createElement('div');
                        forecastNight.className = 'forecast-night';
                        forecastNight.textContent = `${minTemp.toFixed(1)}°C`;
                        forecastBar.appendChild(forecastNight);

                        forecastContainer.appendChild(forecastBar);
                    });
                } else {
                    document.getElementById('currentTempMax').textContent = 'Błąd';
                    document.getElementById('currentTempMin').textContent = 'Błąd';
                    document.getElementById('weatherForecast').innerHTML = '<div>Błąd pobierania prognozy</div>';
                }
            } catch (err) {
                console.error('Błąd pobierania pogody:', err);
                document.getElementById('currentTempMax').textContent = 'Błąd';
                document.getElementById('currentTempMin').textContent = 'Błąd';
                document.getElementById('weatherForecast').innerHTML = '<div>Błąd pobierania prognozy</div>';
                document.getElementById('weatherCity').textContent = 'Nieznane miasto';
            }
        }

        window.onload = async function() {
            const logsRef = ref(database, 'logs');
            onValue(logsRef, (snapshot) => {
                let logs = snapshot.val() ? Object.entries(snapshot.val()).map(([key, value]) => ({ key, ...value })) : [];
                logs.sort((a, b) => b.timestamp - a.timestamp);
                if (logs.length > 100) logs = logs.slice(0, 100);
                displayLogs(logs);
            });

            const ip = await getIp();
            console.log('Pobrane IP przy załadowaniu strony:', ip);
            await logVisit();
            await getWeather(ip);

            // Opcjonalne: Automatyczne odświeżanie pogody co godzinę
            /*
            setInterval(async () => {
                const ip = await getIp();
                await getWeather(ip);
            }, 3600000); // 1 godzina
            */
        };
    </script>
</body>
</html>
